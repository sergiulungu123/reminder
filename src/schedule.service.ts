import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { SupabaseService } from './supabase.service';
import { InjectBot } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';

@Injectable()
export class ReminderSchedulerService {
  private readonly logger = new Logger();
  constructor(
    private readonly supabase: SupabaseService,
    @InjectBot() private readonly bot: Telegraf<any>, // ‚úÖ –≤–æ—Ç —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ
  ) {
    console.log('‚úÖ ReminderScheduler –∑–∞–ø—É—â–µ–Ω');
  }

  @Cron(CronExpression.EVERY_MINUTE)
  async handleReminderCheck() {
    const serverDate = new Date().toISOString();
    this.logger.debug(`Server date: ${serverDate}`);
    const reminders = await this.supabase.getDueReminders();

    for (const reminder of reminders) {
      try {
        await this.bot.telegram.sendMessage(
          reminder.chat_id,
          `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\nüìù ${reminder.text}`,
        );

        await this.supabase.markAsDelivered(reminder.id); // üëà —Ç—É—Ç –æ–±–Ω–æ–≤–ª—è–µ–º
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', err.message);
      }
    }
  }
}
